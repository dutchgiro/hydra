// Automatically generated by MockGen. DO NOT EDIT!
// Source: etcd_manager.go

package mock_supervisor

import (
	gomock "github.com/innotech/hydra/vendors/code.google.com/p/gomock/gomock"
	config "github.com/innotech/hydra/vendors/github.com/coreos/etcd/config"
)

// Mock of EtcdController interface
type MockEtcdController struct {
	ctrl     *gomock.Controller
	recorder *_MockEtcdControllerRecorder
}

// Recorder for MockEtcdController (not exported)
type _MockEtcdControllerRecorder struct {
	mock *MockEtcdController
}

func NewMockEtcdController(ctrl *gomock.Controller) *MockEtcdController {
	mock := &MockEtcdController{ctrl: ctrl}
	mock.recorder = &_MockEtcdControllerRecorder{mock}
	return mock
}

func (_m *MockEtcdController) EXPECT() *_MockEtcdControllerRecorder {
	return _m.recorder
}

func (_m *MockEtcdController) Restart(config *config.Config) {
	_m.ctrl.Call(_m, "Restart", config)
}

func (_mr *_MockEtcdControllerRecorder) Restart(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Restart", arg0)
}

func (_m *MockEtcdController) Start(config *config.Config) {
	_m.ctrl.Call(_m, "Start", config)
}

func (_mr *_MockEtcdControllerRecorder) Start(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0)
}

func (_m *MockEtcdController) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

func (_mr *_MockEtcdControllerRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}
